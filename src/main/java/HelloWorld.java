package main.java;/*COPYRIGHT 1995-2015 ESRITRADE SECRETS: ESRI PROPRIETARY AND CONFIDENTIALUnpublished material - all rights reserved under theCopyright Laws of the United States.For additional information, contact:Environmental Systems Research Institute, Inc.Attn: Contracts Dept380 New York StreetRedlands, California, USA 92373email: contracts@esri.com*/import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import static org.junit.Assert.fail;import java.net.UnknownHostException;import java.util.Arrays;import java.util.Collection;import java.util.GregorianCalendar;import org.junit.After;import org.junit.AfterClass;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;import com.esri.arcgisruntime.arcgisservices.TimeUnit;import com.esri.arcgisruntime.geometry.Point;import com.esri.arcgisruntime.geometry.SpatialReferences;import com.esri.arcgisruntime.layers.ArcGISMapImageLayer;import com.esri.arcgisruntime.layers.ArcGISTiledLayer;import com.esri.arcgisruntime.loadable.LoadStatus;import com.esri.arcgisruntime.mapping.ArcGISMap;import com.esri.arcgisruntime.mapping.ArcGISScene;import com.esri.arcgisruntime.mapping.Basemap;import com.esri.arcgisruntime.mapping.TimeExtent;import com.esri.arcgisruntime.mapping.TimeValue;import com.esri.arcgisruntime.mapping.Viewpoint;import com.esri.arcgisruntime.mapping.Viewpoint.Type;import com.esri.arcgisruntime.mapping.view.MapView;import com.esri.arcgisruntime.mapping.view.SceneView;import com.esri.arcgisruntime.mapping.view.WrapAroundMode;import com.esri.common.utils.Geo;import com.esri.common.utils.GeoLoadableUtils;import com.esri.common.utils.LoadableUtils;import com.esri.common.utils.TestData;import com.esri.common.utils.TestData.MapServers;import com.esri.common.utils.TestData.TiledServers;import com.esri.common.utils.TestUtils;import com.esri.framework.FxGeoGUI;import com.esri.framework.VisualTest;import com.esri.utilities.GeoViewUtils;/** * The Class ArcGISMapImageLayerTest. The following test cases are based on the ArcGISImageLayer Test Design Plan * available at https://devtopia.esri.com/runtime/common-test/wiki/Test-Design-for-Map-Image-Layer * * @since 100.0.0 */@SuppressWarnings("javadoc")@RunWith(Parameterized.class)public class HelloWorld {  private final Class<?> geoViewClass;// either MapView.class or SceneView.class  private final Class<?> geoClass;// either Map.class or Scene.class  private static FxGeoGUI gui;  private Geo geo;  /**   * called in UI mode and not called for unit test mode.   *   * @param args the arguments   * @throws Exception the exception   */  public static void main(String[] args) throws Exception {    FxGeoGUI.setjUnitTest(false);    @SuppressWarnings("unused")    HelloWorld test = new HelloWorld(null, MapView.class);  }  @AfterClass  public static void afterClass() throws Exception {    gui.stop();  }  // the test constructor taking a parameter  public HelloWorld(String testParameterName, final Class<?> classs) throws Exception {    this.geoViewClass = classs;    if (geoViewClass.equals(MapView.class)) {      geoClass = ArcGISMap.class;    } else if (geoViewClass.equals(SceneView.class)) {      geoClass = ArcGISScene.class;    } else {      geoClass = null;    }    initialize();  }  private void initialize() throws Exception {    if (gui == null) {      gui = new FxGeoGUI(geoViewClass);    }    gui.checkSwitchGeoView(geoViewClass);    gui.setTestClass(this);    gui.enableButtons();    gui.addNewLine("Select a test:");  }  @Before  public void setUp() throws Exception {    geo = Geo.init(geoClass, new Basemap(new ArcGISTiledLayer(TiledServers.URL_TS_WORLD_TOPO)));    GeoLoadableUtils.loadAsyncCheck(geo);    GeoViewUtils.setGeo(gui.getGeoView(), geo);  }  @After  public void tearDown() throws Exception {    gui.waitOnContinueButton("Click continue to finish the test");    gui.clearText();  }  // UI cases: Properties  /**   * Test MapImageLayer visibility.   *   * @since 100.0.0   */  @VisualTest  @Test  public void testVisibility() throws Exception {    gui.waitOnContinueButton("Click continue to add the US image layer");    ArcGISMapImageLayer layer = loadMapImageLayer(TestData.MapServers.URL_MS_USA_WGS84);    gui.waitOnContinueButton("Click continue to update the layer brightness");    layer.setBrightness(50f);    assertEquals(layer.getBrightness(), 50f, 0);    gui.waitOnContinueButton("Click continue to set brightness back");    layer.setBrightness(1f);    gui.waitOnContinueButton("Click continue to update the layer gamma value");    layer.setGamma(50f);    assertEquals(layer.getGamma(), 50f, 0);    gui.waitOnContinueButton("Click continue to set Gamma back");    layer.setGamma(1f);    gui.waitOnContinueButton("Click continue to update the layer contrast");    layer.setContrast(50f);    assertEquals(layer.getContrast(), 50f, 0);    gui.waitOnContinueButton("Click continue to set Contrast back");    layer.setContrast(1f);    gui.waitOnContinueButton("Click continue to set the visibility of the layer to false");    layer.setVisible(false);    assertFalse(layer.isVisible());    gui.waitOnContinueButton("Click continue to set back the visibility of the layer with 0.5 opacity");    layer.setOpacity(0.5f);    layer.setVisible(true);    assertTrue(layer.isVisible());    gui.waitOnContinueButton(        "Click continue to set the cities (yellow dots) sublayer visibility to false, opacity to full.");    assertEquals(4, layer.getSublayers().size());    layer.setOpacity(1f);    layer.getSublayers().get(0).setVisible(false);    assertFalse(layer.getSublayers().get(0).isVisible());    assertTrue(layer.getSublayers().get(1).isVisible());    assertTrue(layer.getSublayers().get(2).isVisible());    assertTrue(layer.getSublayers().get(3).isVisible());    gui.waitOnContinueButton(        "Click continue to set the rest of sublayers as not visible. You should not see any sublayer.");    layer.getSublayers().get(1).setVisible(false);    layer.getSublayers().get(2).setVisible(false);    layer.getSublayers().get(3).setVisible(false);    assertFalse(layer.getSublayers().get(1).isVisible());    assertFalse(layer.getSublayers().get(2).isVisible());    assertFalse(layer.getSublayers().get(3).isVisible());    gui.waitOnContinueButton("Click continue to set back the cities (yellow dots) sublayer visibility");    layer.getSublayers().get(0).setVisible(true);  }  // Please be aware connection to service sometimes is slow and it takes  // a while to re-draw the layer when zooming in/out  /**   * Test min and max scales.   *   * @since 100.0.0   */  @VisualTest  @Test  public void testMinMaxScales() throws Exception {    gui.addNewLine("Please be aware soemtimes the connection to service sometimes is slow and "        + "it takes a while to re-draw the layer when zooming in/out (around 20-40 sec).");    ArcGISMapImageLayer layer = loadMapImageLayer(MapServers.URL_MS_USA_WGS84);    gui.addNewLine("This is the initial view point.");    Point p = new Point(-1.1271200091246407E7, 4464919.627269683, SpatialReferences.getWebMercator());    gui.getGeoView().setViewpointAsync(new Viewpoint(p, 4600000));    gui.waitOnContinueButton("Click continue to set the min.scale above a number which doesn't "        + "render. Zoom out; layer should not render when zoomed out more than 3 mouse wheels.");    layer.setMinScale(1.8489297737236E7);    gui.waitOnContinueButton("Click continue to set again the mapView to the initial view point. ");    gui.getGeoView().setViewpointAsync(new Viewpoint(p, 4600000));    gui.waitOnContinueButton("Click continue to set the max. scale below a number which doesn't render. "        + "Zoom out (as much as you can) for rendering the layer. Layer should not render when zooming "        + "in (more than 4-5 mouse wheels).");    layer.setMaxScale(1.8489297737236E7);    layer.setMinScale(0.0);    gui.waitOnContinueButton("Click continue to set again the mapView to the initial view point. ");    gui.getGeoView().setViewpointAsync(new Viewpoint(p, 4600000));    gui.waitOnContinueButton("Click continue to set max/min scales to an intermediate range of values. "        + "Zoom out 2-3 mouse wheels the layer should render. Zoom in (all) / out (all) should not render");    layer.setMinScale(7.3957190948944E7);    gui.waitOnContinueButton("Click continue to set again the mapView to the initial view point. ");    gui.getGeoView().setViewpointAsync(new Viewpoint(p, 4600000));    gui.waitOnContinueButton(        "Click continue to set the min and max. scales to the same level. "            + "Zoom in/out, layer should not be rendered");    layer.setMinScale(4622324.434309);    layer.setMaxScale(4622324.434309);  }  /**   * Test wraparound.   *   * @since 100.0.0   */  @VisualTest  @Test  public void testWraparound() throws Exception {    if (geoViewClass.equals(SceneView.class)) {      gui.addNewLine("test not applicable to SceneView");      return;    }    GeoViewUtils.setWrapAroundMode(gui.getGeoView(), WrapAroundMode.DISABLED);    assertFalse(gui.getGeoView().isWrapAroundEnabled());    gui.addNewLine("Pan around to check wraparound off.");    testSubset_10_X_Layers();    assertEquals(2, geo.getOperationalLayers().size());    GeoViewUtils.setWrapAroundMode(gui.getGeoView(), WrapAroundMode.ENABLE_WHEN_SUPPORTED);    gui.addNewLine("Pan around to check wraparound on.");  }  @Test  public void testSubset_10_X_Layers() throws Exception {    // 10.2 version layer    gui.waitOnContinueButton("Click continue to add a layer from a 10.2 server (around Florida)");    ArcGISMapImageLayer v2layer = new ArcGISMapImageLayer(MapServers.URL_MS_MULTIPOINT_FLORIDA);    TestUtils.assertLoadStatus(v2layer, LoadStatus.LOADED, null);    geo.getOperationalLayers().add(v2layer);    gui.getGeoView().setViewpoint(new Viewpoint(v2layer.getFullExtent()));    // 10.1 version layer    gui.waitOnContinueButton(        "Click continue to add a layer from a 10.1 server (Europe around Slovenia). Zoom in to check it");    ArcGISMapImageLayer v1layer = new ArcGISMapImageLayer(MapServers.URL_MS_MULTIPOINT_EUROPE);    TestUtils.assertLoadStatus(v1layer, LoadStatus.LOADED, null);    geo.getOperationalLayers().add(v1layer);    gui.getGeoView().setViewpoint(new Viewpoint(v1layer.getFullExtent()));  }  /**   * Test multiple image layers (also an invalid layer).   *   * @since 100.0.0   */  // Performance Tests: Load from different server versions (10.1x, 10.2x,  // 10.3x).  @VisualTest  @Test  public void testMultipleLayers() throws Exception {    gui.waitOnContinueButton("Click continue to add an image layer, check it loads");    // 10.3 version layers    ArcGISMapImageLayer v3layer = loadMapImageLayer(MapServers.URL_MS_WORLD_CITIES);    gui.waitOnContinueButton("Click continue to add a the USA image layer to the map, check it loads.");    ArcGISMapImageLayer layer = loadMapImageLayer(MapServers.URL_MS_USA_WGS84);    assertEquals(2, geo.getOperationalLayers().size());    // invalid layer    gui.waitOnContinueButton("Click continue to add an invalid layer into the map. It shouldn't load");    final ArcGISMapImageLayer invalidlayer = new ArcGISMapImageLayer(MapServers.URL_INVALID);    invalidlayer.addDoneLoadingListener(new Runnable() {      @Override      public void run() {        assertEquals(invalidlayer.getLoadError(), UnknownHostException.class);      }    });    testSubset_10_X_Layers();    assertEquals(4, geo.getOperationalLayers().size());    gui.waitOnContinueButton("Click continue to rotate the map."        + "\n (SceneView) https://devtopia.esri.com/runtime/java-common-api/issues/4674");    Viewpoint vp = gui.getGeoView().getCurrentViewpoint(Type.CENTER_AND_SCALE);    gui.getGeoView().setViewpointAsync(new Viewpoint((Point) vp.getTargetGeometry(), vp.getTargetScale(), 90));    gui.waitOnContinueButton("Pan and zoom to check all data draws correctly. Click continue when done.");    v3layer.getSublayers().get(1).setVisible(false);    assertFalse(v3layer.getSublayers().get(1).isVisible());    assertTrue(v3layer.getSublayers().get(0).isVisible());    layer.getSublayers().get(3).setVisible(false);    assertFalse(layer.getSublayers().get(3).isVisible());    assertTrue(layer.getSublayers().get(2).isVisible());    assertTrue(layer.getSublayers().get(1).isVisible());    assertTrue(layer.getSublayers().get(0).isVisible());    gui.waitOnContinueButton("Click continue to rotate the map back and remove the world cities layer");    vp = gui.getGeoView().getCurrentViewpoint(Type.CENTER_AND_SCALE);    gui.getGeoView().setViewpointAsync(new Viewpoint((Point) vp.getTargetGeometry(), vp.getTargetScale(), 0));    geo.getOperationalLayers().remove(v3layer);    assertEquals(3, geo.getOperationalLayers().size());    if (geoClass == ArcGISScene.class) {      fail("(SceneView not rotating) https://devtopia.esri.com/runtime/java-common-api/issues/4674");    }  }  // for https://devtopia.esri.com/runtime/common-test/wiki/Test-Design-for-Time-Support-(Layers)  //Test case 4.1: Test compare features from ArcGISMapImageLayer in one year with the next [SDK]  //This is testing that a -ve offset means request features in the future  @VisualTest  @Test  public void testTimeComparison() throws Exception {    //Set the maps TimeExtent to be from 1st January 2000 to 1st January 2001 and set it on the MapView    GregorianCalendar jan = new GregorianCalendar(2000, 0, 1);    GregorianCalendar jan2 = new GregorianCalendar(2001, 0, 1);    gui.getGeoView().setTimeExtent(new TimeExtent(jan, jan2));    // Create an ArcGISMapImageLayer using the Url for "Earthquakes" (see data table)    // Create a 2nd ArcGISMapImageLayer using the PortalItem for "Earthquakes" (see data table) - set TimeOffset to be Length = -1 Unit = Year    ArcGISMapImageLayer earthquakes = new ArcGISMapImageLayer(TestData.MapServers.URL_TIMEAWARE_EARTHQUAKES);    GeoLoadableUtils.addLayer(geo, earthquakes, false);    ArcGISMapImageLayer earthquakes2 = new ArcGISMapImageLayer(TestData.MapServers.URL_TIMEAWARE_EARTHQUAKES);    earthquakes2.setTimeOffset(new TimeValue(-1, TimeUnit.YEARS));    GeoLoadableUtils.addLayer(geo, earthquakes2, false);    gui.waitOnContinueButton(        "The first layer should have many features (about 37)");    earthquakes2.setVisible(false);    gui.waitOnContinueButton(        "The second (offset) layer should have about half the number of features (about 23)");    earthquakes2.setVisible(true);    earthquakes.setVisible(false);  }  private ArcGISMapImageLayer loadMapImageLayer(String url) throws Exception {    ArcGISMapImageLayer layer = new ArcGISMapImageLayer(url);    LoadableUtils.loadAsyncCheck(layer);    TestUtils.assertLoadStatus(layer, LoadStatus.LOADED, null);    geo.getOperationalLayers().add(layer);    gui.getGeoView().setViewpoint(new Viewpoint(layer.getFullExtent()));    return layer;  }  @Parameters(name = "{0}")  public static Collection<Object[]> parameters() {    return Arrays.asList(new Object[] {        "MapView", MapView.class    }, new Object[] {        "SceneView", SceneView.class    });  }}